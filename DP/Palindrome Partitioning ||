Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    private:
    bool isPalindrome(string s){
        int i=0, j= s.size()-1;
        while(i<=j){
            if(s[i]!=s[j])return false;
            i++;
            j--;
        }
        return true;
    }
    private:
    int solve(int i, int j , string s, vector<vector<int>>&dp){
        if(i>j) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        if(isPalindrome(s.substr(i, j-i+1))){
            return 0;
        }
        int ans= INT_MAX;
        for(int k=i;k<j;k++){
            int left = INT_MAX, right = INT_MAX;
            if(dp[i][k] == -1) 
              dp[i][k] = solve(i,k,s,dp);
            left = dp[i][k];
            if(dp[k+1][j] ==-1)
             dp[k+1][j]= solve(k+1, j, s,dp);
            right = dp[k+1][j];
            int temp = 1+ left+right;
            ans= min(ans,temp);
        }
        return dp[i][j] = ans;
    }
public:
    int minCut(string s) {
        int n = s.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));

        return solve(0, s.size()-1, s,dp);
    }
};
