Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtreeof a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

------------------------------------------------------------------------------------------------------------------------------------------------
\/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    bool solve(TreeNode*root, long long left, long long right){
        if(!root) return true;
        if(root->val <right && root->val>left) return solve(root->left, left, root->val) && 
        solve(root->right, root->val, right);
        return false;
    }
public:
    bool isValidBST(TreeNode* root) {
        long long int left = -1000000000000, right = 1000000000000;
        return solve(root,left,right);
    }
};
